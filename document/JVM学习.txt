1.JVM的位置
	操作系统上
2.JVM的体系结构
	详见本人ProcessOn图
3.类加载器[Class Loader]
	作用:加载class文件,
4.双亲委派机制
	1.类加载器收到类加载的请求
	2.将这个请求向上委托给父类加载器去完成,一直向上委托,直到启动类加载器
	3.启动加载器检查是否能够加载当前这个类,能加载就结束,使用当前的加载器,否则抛出异常,通知子加载器进行加载
	4.重复步骤3
	好处:
		1.防止重复加载同一个.class. 通过委托向上是否已经加载过,保证数据安全
		2.保证核心.class不能篡改.
5.沙箱安全机制
	了解,就是权限控制
6.本地方法栈[Native]
	作用: 调用本地native的内存模型
7.PC寄存器[程序计数器]
	每个线程都有一个程序计数器,是线程私有的,就是一个指针,指向方法区中的方法字节码(用来存储指向下一条指令的地址,
	也即将要执行的指令代码),在执行引擎读取下一条指令,是一个非常小的内存空间,几乎可以忽略不计
	指向当前线程正在执行的字节码指令.
8.方法区[Method Area]
	方法区是被所有线程共享,在一定条件下会被GC,当方法区域需要使用的内存超过其允许的大小时,会抛出OutOfMemory错误
	作用: 用于存储已被虚拟机加载的类信息、常量[final]、静态变量[static]、即时编译后的代码等数据
	运行时常量池是在方法区开辟的一块区域.
9.栈[Stack]: 数据结构
	先进后出
	存放8大基本类型+对象引用[非基本类型的对象在JVM栈上仅存放一个指向堆上的地址]+实例的方法
	线程结束,栈内存也就释放了,对于栈来说,不存在垃圾回收
	程序正在执行的方法,一定在栈的顶部
10.堆[heap]
	一个JVM只有一个堆内存,堆内存的大小是可以调节的
	类加载器读取了类文件后,保存所有引用类型的数据
	新生区[伊甸园区/Eden/New]:
	老年区[Old]:
	永久区[元空间/Perm]:
		这个区域常驻内存,用来存放JDK自身携带的class对象,interface元数据,存储的是java运行时的一些环境或类信息,这个区域不存在垃圾回收,
		关闭VM虚拟才会释放这个区域的内存.
		逻辑上存在,物理上不存在
		
	内存分析工具MAT,Jprofiler
		分析Dump内存文件,快速定位内存泄漏位置
		获得堆中的数据
		获得大的对象

	jdk1.6之前: 永久代,常量池是在方法区
	jdk1.7:		永久代,慢慢消失,因为去永久化,常量池在堆中
	jdk1.8之后:	无永久代,常量池在元空间
	
12.GC垃圾回收机制
	引用计数法: 为每个对象分配一个计数器
	标记清除法:	扫描堆中的对象,对活着的对象进行标记;清除:对没有被标记的对象,进行清除.
		优点: 不需要额外的空间!
		缺点: 两次扫描,严重浪费时间,会产生内存碎片
	复制算法:	每次GC都会将Eden活的对象移动到幸存区中,一旦Eden区被GC后,就会是空的,幸存区to和幸存区from,
		谁空谁是to,当一个对象经历了15次[默认配置,可以通过-XX:MaxTenuringThreshold=n修改]GC还没死.就进入老年代
		优点: 没有内存碎片
		缺点: 浪费了内存空间,多了一半空间永远是空to.
		最佳使用场景: 对象存活度较低.
	标记压缩法: 在标记清除的基础上,再压缩,防止内存碎片的产生.原理:再次扫描,向一端移动存活的对象,
		多了一个移动成本.
		
	总结:
		内存效率: 	复制算法 > 标记清除算法 > 标记压缩算法 (时间复杂度)
		内存整齐度:	复制算法 = 标记压缩算法 > 标记清除算法
		内存利用率:	标记压缩算法 = 标记清除算法 > 复制算法
		
		GC: 分代收集算法
		年轻代: 
			存活率低!  采用复制算法!
		老年代:
			区域大,存活率高!	标记清除(内存碎片还不是太多)+标记压缩 混合实现!
	
		
13.JMM[Java Memory Model]

14.Native关键字: 凡是带了该关键字的,说明java的作用范围达不到了,会去调用底层C语言的库,
   会进入本地方法栈,调用本地方法接口[JNI java native interface],扩展java的使用,融合不同的编程语言为java所用,
   它在内存区域中专门开辟了一块标记区域:native method stack,登记native方法,在最终执行的时候,加载本地方法库中的方法通过JNI

===========================================JVM配置详解===========================================
-Xmx300m				最大堆大小
-Xms300m				初始堆大小
-Xmn100m				年轻代大小
-XX:SurvivorRatio=8		Eden区与Survivor区的大小比值，设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10
-XX:+UseG1GC					使用 G1 (Garbage First) 垃圾收集器 
	可选项[SerialGC,ParallelGC,CMS,G1]:
	SerialGC
		参数-XX:+UseSerialGC	Young区和old区都使用serial垃圾回收算法
	ParallelGC
		参数-XX:+UseParallelGC	Young区:使用Parallel scavenge回收算法
								Old 区:可以使用单线程的或者Parallel垃圾回收算法,由-XX:+UseParallelOldGC来控制
	CMS
		参数-XX:+UseConcMarkSweepGC		Young区:可以使用普通的或者parallel垃圾回收算法,由参数-XX:+UseParNewGC来控制
										Old 区:只能使用Concurrent Mark Sweep
	G1
		参数-XX:+UseG1GC		没有Young/Old区
-XX:MaxTenuringThreshold=14		提升年老代的最大临界值(tenuring threshold). 默认值为 15[每次GC，增加1岁，到15岁如果还要存活，放入Old区]
-XX:ParallelGCThreads=8			设置垃圾收集器在并行阶段使用的线程数[一般设置为本机CPU线程数相等，即本机同时可以处理的个数，设置过大也没有用]
-XX:ConcGCThreads=8				并发垃圾收集器使用的线程数量

-XX:+DisableExplicitGC			禁止在启动期间显式调用System.gc()

-XX:+HeapDumpOnOutOfMemoryError		OOM时导出堆到文件
-XX:HeapDumpPath=D:/oom.dump		导出OOM的路径
-XX:+PrintGCDetails					打印GC详细信息
-XX:+PrintGCTimeStamps				打印CG发生的时间戳
-XX:+PrintHeapAtGC					每一次GC前和GC后，都打印堆信息
-XX:+TraceClassLoading				监控类的加载
-XX:+PrintClassHistogram			按下Ctrl+Break后，打印类的信息

===========================================JVM配置选项/默认值 说明===========================================
-XX:+UseG1GC						使用G1(Garbage First)垃圾收集器
-XX:MaxGCPauseMillis=n 				设置最大GC停顿时间(GC pause time)指标(target).这是一个软性指标(soft goal), JVM 会尽量去达成这个目标.
-XX:InitiatingHeapOccupancyPercent=n启动并发GC周期时的堆内存占用百分比. G1之类的垃圾收集器用它来触发并发GC周期,
	基于整个堆的使用率,而不只是某一代内存的使用比. 值为 0 则表示"一直执行GC循环". 默认值为 45.
-XX:NewRatio=n 						新生代与老生代(new/old generation)的大小比例(Ratio). 默认值为 2.
-XX:SurvivorRatio=n eden/survivor 	空间大小的比例(Ratio). 默认值为 8.
-XX:MaxTenuringThreshold=n 			提升年老代的最大临界值(tenuring threshold). 默认值为 15.
-XX:ParallelGCThreads=n 			设置垃圾收集器在并行阶段使用的线程数,默认值随JVM运行的平台不同而不同.
-XX:ConcGCThreads=n 				并发垃圾收集器使用的线程数量. 默认值随JVM运行的平台不同而不同.
-XX:G1ReservePercent=n 				设置堆内存保留为假天花板的总量,以降低提升失败的可能性. 默认值是 10.
-XX:G1HeapRegionSize=n 				使用G1时Java堆会被分为大小统一的的区(region)。此参数可以指定每个heap区的大小.
	默认值将根据 heap size 算出最优解. 最小值为 1Mb, 最大值为 32Mb.
	
===========================================JVM堆大小的默认最大和最小值（参考）===========================================
操作系统及JVM类型						初始堆的大小（Xms）						最大堆的大小（Xmx）
Linux/Solaris,32位客户端				    16MB									256MB
Linux/Solaris,32位服务器				    64MB									取1GB和物理内存大小1/4二者中的最小值
Linux/Solaris,64位服务器				    取512MB和物理内存大小1/64二者中的最小值	取32GB和物理内存大小1/4二者中的最小值
MacOS,64位服务器型JVM				    64MB									取1GB和物理内存大小1/4二者中的最小值
32位Window系统,客户端型JVM			    16MB									256MB
64位Window系统,客户端型JVM			    64MB									1GB和物理内存大小1/4二者中的最小值

===========================================JVM一般性调优办法===========================================
1. -Xmx和-Xms一般设置为一样大小,这样能稍微提高GC的运行效率,因为它不再需要估算堆是否需要调整大小了

===========================================JVM参数配置报错===========================================
1. Conflicting collector combinations in option list; please refer to the release notes for the combina
	报错：使用多种GC导致GC冲突





