Docker Hub 账号密码
pizazz777	Hxiao520..

容器数据卷  mounts
1.使用数据卷
	方式一:直接使用命令来挂载 -v  (是双向绑定)
		docker run -it -v 主机目录:容器目录
		
	具名挂载和匿名挂载	
	匿名:	-v 容器内路径	不建议使用
		docker run -d -P --name nginx01 -v /etc/nginx nginx
	具名: 	-v 具名:容器内路径[:ro/rw]	ro:read only; rw: read write 默认 
	
2.使用dockerfile		
	创建一个dockerfile文件
	文件中的内容  指令[大写] 参数
	FROM centos
	
	VOLUME ["/volume01", "/volume02"]
	
	CMD echo "-----end-------"
	CMD /bin/bash
	# 这里的每一个命令,就是镜像的一层	
		
	数据卷容器
	--volumes-from	
	示例  docker run -it --name docker01 --volumes-from 父容器ID
		
dockerFile
	构建步骤:
	1.编写一个dockerFile文件
	2.docker build 构建成为一个镜像
	3.docker run 运行镜像
	4.docker push 发布镜像(DockerHub,阿里云镜像仓库)
	基础知识:
	1.每个保留关键字(指令)都必须是大写字母
	2.执行从上到下顺序
	3.#表示注释
	4.每一个指令都会创建提交一个新的镜像层,并提交
	常用命令:
	FROM			# 基础镜像,一切从这里开始构建
	MAINTAINER		# 镜像是谁写的, 姓名+邮箱
	RUN				# 镜像构建的时候需要运行的命令
	ADD				# 添加内容,会自动解压
	WORKDIR			# 镜像的工作目录
	VOLUME			# 挂载的目录
	EXPOST			# 保留端口配置
	CMD				# 指定这个容器启动的时候需要运行的命令,只有最后一个会生效,可以被替代
	ENTRYPOINT		# 指定这个容器启动的时候需要运行的命令,可以追加命令
	ONBUILD			# 当构建一个被集成DockerFile,这个时候就会触发ONBUILD指令	
	COPY			# 类似ADD,将我们文件拷贝到镜像中
	ENV				# 构建的时候设置环境变量
		
	CMD和ENTRYPOINT的区别:
	CMD是替换docker run跟的参数命令,ENTRUPOINT是追加命令	
		
		
启动Nginx命令
docker run -d --name nginx01 -p5678:80 nginx
启动Mysql命令
docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql 
-e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:TAG

Docker制作自定义Tomcat
1.编写Dockerfile文件   文件名:Dockerfile
FROM centos
MAINTAINER pizazz<1769589713@qq.com>

COPY readme.txt /usr/local/readme.txt

ADD apache-tomcat-9.0.50.tar.gz /usr/local/
ADD jdk-8u291-linux-x64.tar.gz /usr/local/

RUN yum -y install vim

ENV MYPATH /usr/local
WORKDIR $MYPATH

ENV JAVA_HOME /usr/local/jdk1.8.0_291
ENV CLASSPATH $JAVA_HOME/lib/dt.jat;$JAVA_HOME/lib/tools.jar
ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.50
ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.50
ENV PATH $PATH:$JAVA_HOME/bin;$CATALINA_HOME/lib;$CATALINA_HOME/bin

EXPOSE 8080

CMD /usr/local/apache-tomcat-9.0.50/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.50/bin/logs/catalina.out
2.构建镜像 
docker build -t mytomcat .
3.启动容器
docker run -d -p 5660:8080 --name mytomcat02 -v /home/mydocker/build/tomcat/test:/usr/local/apache-tomcat-9.0.50/webapps/test 
-v /home/mydocker/build/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.50/logs pizazztomcat
4.发布镜像到Docker Hub/阿里云
① docker login -u pizazz777 -p password
② 如果没有版本号,标记TAG: docker tag mytomcat pizazz777/mytomcat:1.0.1
③ 推送 docker push pizazz777/mytomcat:1.0.1


Docker网络   命令 ip addr
docker0相当于路由器
我们每启动一个docker容器,docker就会给docker容器分配一个ip,只要安装了docker,就会有一个网卡docker0,使用的是桥接模式
使用的是evth-pair技术,都是成对的
evth-pair就是一对的虚拟设备接口,成对出来,一端连着协议,一端彼此连接
Docker中的所有网络接口都是虚拟的.虚拟效率高

网络模式
	bridge: 桥接 [docker默认]
	none:	不配置网络
	host:	和宿主机共享网络
	container:	容器网络连通
	
	docker容器启动命令省略了中括号中的内容 docker run -d -P --name tomcat01 [--net bridge] tomcat
	
自定义网络
	docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet
	--driver bridge  		桥接模式
	--subnet 192.168.0.0/16	子网掩码   16可以分配255*255个  24可以分配255个
	--gateway 192.168.0.1	网关

网络连通
	docker network connet mynet tomcat01

启动Redis集群
	docker network create redis --subnet 172.38.0.0/16

	通过脚本创建6个redis配置
	for port in $(seq 1 6); \
	do \
	mkdir -p /mydata/redis/node-${port}/conf
	touch /mydata/redis/node-${port}/conf/redis.conf
	cat << EOF >/mydata/redis/node-${port}/conf/redis.conf
	port 6379
	bind 0.0.0.0
	cluster-enabled yes
	cluster-config-file nodes.conf
	cluster-node-timeout 5000
	cluster-announce-ip 172.38.0.1${port}
	cluster-announce-port 6379
	cluster-announce-bus-port 16379
	appendonly yes
	EOF
	done

	通过脚本启动6个redis容器  [好像只启动了6号]
	docker run -p 637${port}:6379 -p 1637${port}:16379 --name redis-${port} \
	-v /mydata/redis/node-${port}/data:/data \
	-v /mydata/redis/node-${port}/conf/redis.conf:/etc/redis/redis.conf \
	-d --net redis --ip 172.38.0.1${port} redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf;

	单独脚本
	docker run -p 6376:6379 -p 16376:16379 --name redis-6 \
	-v /mydata/redis/node-6/data:/data \
	-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \
	-d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf

	连接redis集群
	docker exec -it redis-1 /bin/sh

	创建集群
	redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1

	切换为集群模式
	redis-cli -c
	设置获取值
	set key value
	get key
	
Docker发布jar包
	1.制作Dockerfile文件
	2.上传jar包和Dockerfile文件
	3.构建镜像  docker build -t xxx .
	4.启动容器  docker run -d -p 8080:8080 --name learn xxx




