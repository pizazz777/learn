Linux配置java环境
1.下载jdk-8u301-linux-x64.tar.gz,并上传到linux服务器
2.解压 tar -zxvf jdk-8u301-linux-x64.tar.gz
3.添加环境变量
	vim /etc/profile  按i切换输入模式
	export JAVA_HOME=/home/software/jdk1.8.0_301
	export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH
	export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib
	esc退出输入模式,进入命令模式
	:wq保存并退出
	source /etc/profile  加载配置文件
4.验证是否安装成功
	[root@pizazz /]# java -version
	java version "1.8.0_301"
	Java(TM) SE Runtime Environment (build 1.8.0_301-b09)
	Java HotSpot(TM) 64-Bit Server VM (build 25.301-b09, mixed mode)


Redis的自增可以用来做投票,访问量等

NoSQL的特点
	1.方便扩展(数据之间没有关系)
	2.大数据量高性能(Redis能一秒钟写8万次,读11万次,NoSQL的缓存记录级,是一种细粒度的缓存,性能比较高)
	3.数据类型是多样性的(不需要事先设计数据库,随取随用)

了解: 3V+3高
	3V:	海量volume,多样Variety,实时Velocity
	3高: 高并发,高性能,高可扩

Redis用途: 
	1.内存存储,持久化(RDB,Aof)
	2.效率高,可以用于高速缓存
	3.发布订阅系统
	4.地图信息分析
	5.计时器,计数器(浏览量)
Redis特性
	1.多样的数据类型
	2.持久化
	3.集群
	4.事务


Linux安装并使用
	1.下载Redis Linux版
	2.解压 tar -zxvf redis-6.2.5.tar.gz
	3.安装C++环境[c++写的] yum install gcc-c++
	4.检验c++安装 gcc -v
	5.执行make命令继续安装环境
	6.再次执行make命令
	7.执行 make install 检验是否都已经安装了
	8.Redis默认的安装路径 /usr/local/bin
	9.到 /usr/local/bin 下新建一个 myconfig目录,将解压包中的redis.conf 拷贝过来
	10.redis默认不是后台启动,修改配置文件  vim myconfig/redis.conf  将属性daemonize no[no改为yes,以后台方式启动]
	
Redis命令
	# 启动redis服务[通过指定的配置文件启动redis]
		redis-server myconfig/redis.conf
	# 通过客户端连接redis
		redis-cli -p 6379
	# 退出连接
		shutdown   	--关闭redis-server
		exit		--退出客户端 redis-cli
	# 切换数据库[默认0]
		select index
	# 查看数据库数据大小
		DBSIZE
	# 查看所有的key
		keys *
	# 清空当前数据库
		flushdb
	# 清空全部数据库
		flushall
		
		
	set key value	设置值
	get key			获取值
	exists	key		判断key是否存在
	keys *			查看所有的键
	expire key time	设置过期时间[单位秒]
	ttl key			查看剩余过期时间	
	type key		查看key的类型	
	incr key		自增1	(可以用来做计数器等类似功能)
	decr key		自减1
	incrby key step	自增指定步长
	decrby key step	自减指定步长
	move key database_index		移除指定键[database_index:当前数据库索引]
		

Redis是单线程的,基于内存操作,CPU不是Redis性能瓶颈,Redis的瓶颈是根据机器的内存和网络带宽.
	误区1: 高性能的服务器一定是多线程的?
	误区2: 多线程一定比单线程效率高?   如果是单CPU,多线程需要切换上下文,额外造成时间浪费
	Redis是单线程为什么还这么快?
	核心: redis是将所有的数据全部放在内存中,所以说使用单线程去操作效率就是最高的,多线程(CPU切换上下文,耗时操作)
	对于内存来说,没有上下文切换效率就是最高的,多次读写都是在一个CPU上的,在内存情况下,单线程就是最佳方案

五大数据类型
	
	字符串String
		append key value		向key的值追加值[不存在就是新建]
		STRLEN	key				查看key的值长度
		GETRANGE key start stop	获取指定区间字符串[左右都是闭区间]
		SETRANGE key offset value	替换指定偏移量开始的字符串
		setex name expire value	同时设置值和过期时间(set with expire)
		setnx key value			不存在才设置,存在就设置失败(set if not exist,在分布式锁中会常常使用)
		mset k1 v1 k2 v2 k3 v3	批量设置
		mget k1 k2 k3 			批量获取
		msetnx k1 v1 k4 v4		k1存在,k4不存在设置不会成功[msetnx是一个原子性操作,要么一起成功,要么一起失败]
		
	列表List
		LPUSH key element1 element2 ...	将元素从左放入列表中
		RPUSH key element1 element2 ...	将元素从右放入列表中
		LPOP key	从左移除第1个元素
		RPOP key	从右移除第1个元素
		lindex key index	通过下标获取列表中的值
		LLen key	获取列表长度
		Lrem key count value 	移除列表中count个数量的值
		Ltrim key start stop	通过下标截取指定的区域[左右都是闭区间]
		RpopLpush list1 list2	移除list1中右边的第一个元素到list2第一个位置
		Lset key index value	替换列表指定位置的值[key必须先存在,不然会报错]
		Linsert key before/after pivot value	向列表中指定元素pivot向前/后插入一个新的value
		
		小结:
			List实际是一个链表,before node after, left 和 right都可以插入值
			如果key不存在,创建新的链表
			如果key存在,新增内容
			如果移除了所有元素,空链表,代表不存在
			在两遍插入或者改动值,效率最高,查找中间元素,效率相对来说会低一些
		
	集合Set
		Sadd  key value			向一个集合添加元素
		Smembers key			查看集合中的值
		Sismember key member	判断集合中是否存在指定成员
		Scard key				获取集合中成员的个数
		Srem key member			移除集合中指定的成员
		Srandmember key [count]		随机抽取一个[count个]成员
		Spop key				随机移除一个成员
		Smove set1 set2 value	移动一个set1中的value到set2
		Sdiff set1 set2			以set1为主查看set1和set2的差集
		Sinter set1 set2 		查看set1和set2的交集
		Sunion	set1 set2		查看set1和set2的并集
		
	哈希Hash
		Hset key field value	设置值
		Hget key field			获取值
		Hmset key field1 value2 field2 value2 	批量设置值
		Hmget key field1 field2		批量获取值
		Hgetall key				获取key所有的键值对
		Hdel key field			删除指定的key的指定的field
		Hlen key				获取指定key的键值对数量
		Hexists key field		判断key指定的字段是否存在
		Hkeys key				获取key所有的键
		Hvals key				获取key所有的值
		Hincrby key field increment	对key中指定键的值自增指定数量
		Hdecrby key field increment	对key中指定键的值自减指定数量
		Hsetnx key field value	不存在才设置,存在就设置失败
		
	有序集合ZSet
		Zadd key score1 member1 score2 member2		设置值[可以批量设置]
		Zrangebyscore key -inf +inf	[withscores]	获取值并根据score排序,从小到大[withscores附带分数显示]
		Zrevrange key start stop	获取值并根据score排序,从大到小
		Zrange key start stop		获取值并按照score排序 
		Zrem key member				移除指定key的成员
		Zcard key 					查看集合中成员的个数
		Zcount key start stop 		获取指定score区间的成员数量

三种特殊数据类型

	位存储bitmap
		setbit key offset value	设置值
		getbit key offset		获取值
		bitcount key 			统计value为1的
		
	数据结构hyperloglogs
		PFadd key element ... 	添加值
		PFcount key				查看key中元素的数量
		PFmerge destkey sourcekey1 sourcekey2	合并1,2到目标,不重复
		
		做计数统计的算法
		优点:占用的内存是固定的
		如果允许容错,那么一定可以使用Hyperloglog[有0.81%的错误率]
		如果不允许容错,就使用set或者自己的数据类型即可
		
	地理位置geospatial
		geoadd key longitude latitude member	添加地理位置[longitude经度 latitude纬度 member成员名称]
			示例: geoadd china:city 106.769369 30.84577 home
		geopos key member			获取指定key成员的经度纬度
		geodist key member1 member2	查看两个成员的直线距离
		georadius key longitude latitude raduis [unit]		以给定的坐标查指定半径内的成员
		georadiusbymember key member radius [unit] 			查询指定成员半径内的其他成员
		
		Redis的Geo功能,可以推算地理位置的信息,两地之间的距离,查看附近的人
		两极无法直接添加,可以通过下载城市数据,直接通过java程序一次性导入
		GEO底层的实现原理其实就是Zset,我们可以使用Zset的命令操作geo; 例如删除, zrem key member

Redis事务
	redis事务本质: 一组命令的集合,一个事务中的所有命令都会被序列化,在事务执行过程中,会按照顺序执行
	所有的命令在事务中,并没直接被执行,只有发起执行命令[EXEC]的时候才会被执行
	redis事务:
		1.开启事务(multi)
		2.命令入队(其它的命令, get set)
		3.执行事务(exec)
		4.取消事务(discard)
		5.监控(watch): 使用watch可以当做redis的乐观锁操作,watch就相当于select version
		6.取消监控(unwatch)
	redis异常:
		编译异常(命令有错): 事务中所有的命令都不会被执行
		运行时异常: 如果事务队列中存在语法性错误,那么执行命令的时候,其它命令是可以正常执行的,错误命令抛出异常
	
Redis.conf详解
	1.单位
		units: 	配置文件unit单位对大小写单位不敏感[k,kb,m,mb,g,gb]
	2.引入
		include:	可以引入其它的配置文件
	3.网络
		bind 127.0.0.1			绑定的ip
		protected-mode yes		保护模式
		port 6379				端口设置
	4.通用配置
		daemonize yes			以守护进程的方式运行,默认值no
		pidfile /var/run/redis_6379.pid		如果以后台的方式运行,需要指定一个Pid文件
		loglevel notice			日志级别[debug,verbose,notice,warning]
		logfile ""				日志输出的路径,不配置就只是输出
		databses 16				数据库的数量,默认是16个
		always-show-logo		是否总显示logo
	5.快照[持久化的时候会用] RDB配置
		持久化:在规定的时间内,执行了多少次操作,则会持久化到文件(.rdb .aof)
		redis是内存数据库,如果没有持久化,那么数据断电消失
		[操作方式   时间单位秒  修改次数]
		save 900 1			900秒内有至少1个键被更改则进行快照
		save 300 10			300秒内有至少10个键被更改则进行快照
		save 60 10000		60秒内有至少10000个键被更改则进行快照
		stop-writes-on-bgsave-error	yes		持久化如果出错,是否还需要继续工作
		rdbcompression yes	是否压缩rdb文件
		rdbchecksum yes		保存rdb文件的时候,进行错误的检查校验
		dir ./				rdb文件保存的目录
	6.主从复制replication
		replicaof <masterip> <masterport>	配置连接的主机信息
		masterauth <master-password>		配置连接的主机密码
	7.安全security
		requirepass	""		是否需要设置密码
	8.客户端
		maxclients	10000	限制客户端连接最大数量
		maxmemory <bytes>	redis配置最大的内存容量
		maxmemory-policy noeviction 	内存到达上限的处理策略[六种,网上百度]
	9.APPEND ONLY MODES AOF配置
		appendonly no		默认不开启aof模式,因为默认是使用rdb方式持久化,在大部分情况下,rdb满足使用
		appendfilename "appendonly.aof"		持久化aof的文件名
		appendfsync everysec	同步配置[三种可选 always:每次修改都同步,消耗性能,everysec:每秒同步一次,可能会丢失1s的值,no:不同步]
		
Redis持久化
	RDB[Redis DataBase] 
		在指定的时间间隔内将内存中的数据及快照写入磁盘,也就是通俗讲的Snapshot快照,它恢复时是将快照文件直接读到内存里,Redis会单独
		创建(fork)一个子进程来进行持久化, 会先将数据写入到一个临时文件中,待持久化过程都结束了,再用这个临时文件替换上次持久化好的文件.
		整个过程中,子进程是不进行任何IO操作的,这就确保了极高的性能.如果需要进行大规模数据的恢复,且对于数据恢复的完整性不是非常敏感,
		那么RDB方式要比AOF方式更加的高效.RDB的缺点是最后一次持久化后的数据可能会丢失
		rdb保存的文件名是dump.rdb
		RDB文件生成触发机制:
			1.save的规则满足情况下,会自动触发rdb规则
			2.执行flushall命令,也会触发rdb规则
			3.退出redis,也会触发rdb规则
			备份就是自动生成dump.rdb文件
		恢复rdb文件
			只需要将rdb文件放在redis启动目录,redis启动的时候会自动检查dump.rdb并恢复其中的数据
		优点:
			1.适合大规模的数据恢复!
			2.对数据的完整性要求不高!
		缺点:
			1.需要一定的时间间隔进行操作!如果Redis以外宕机了,这个最后一次修改数据就没有了
			2.fork子进程的时候,会占用一定的空间
	AOF[Append Only File]
		以日志的形式记录每个写操作,将Redis执行过的所有指令记录下来(读操作不记录),只允许追加文件,不可以更改文件,redis启动之初就会
		读取该文件重新构建数据,换而言之,redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作
		aof保存的文件名是appendonly.aof
		配置文件中默认是不开启的,需要将appendonly no改为yes
		优点:
			1.每次修改都同步,文件的完整性更好!
			2.每秒同步一次,可能会丢失一秒的数据
			3.从不同步,效率最高
		缺点:
			1.相对于数据文件来说,aof远远大于rdb,修复的速度比rdb慢
			2.aof运行效率也要比rdb慢,所以redis默认的配置就是rdb持久化

Redis发布订阅
	subscribe channel			订阅频道,接受者端
	publish channel message		发布频道消息,发布者端

Redis主从复制
	主从复制,是指将一台Redis服务器的数据,复制到其它的Redis服务器.前者称为主节点(master/leader),后者称为从节点(slave/follower);
	数据的复制是单向的,只能由主节点到从节点.Master以写为主,Slave以读为主.
	默认情况下,每台Redis服务器都是主节点;且一个主节点可以有多个从节点(或没有从节点),但一个从节点只能有一个主节点.
	主从复制的作用主要包括:
		1.数据冗余:主从复制实现了数据的热备份,是持久化之外的一种数据冗余方式
		2.故障恢复:当主节点出现问题时,可以由从节点提供服务,实现快速的故障恢复,实际上是一种冗余服务.
		3.负载均衡:在主从复制的基础上,配合读写分离,可以由主节点提供写服务,由从节点提供读服务(既写Redis数据时应用连接主节点,
		读Redis数据时应用连接从节点),分担服务器负载;尤其是在写少读多的场景下,通过多个从节点分担读负载,可以大大提高Redis服务器的并发量.
		4.高可用基石:主从复制还是哨兵和集群能够实施的基础,因此说主从复制是Redis高可用的基础.
	从结构上:单个Redis服务器会发生单点故障,并且一台服务器需要处理所有的请求负载,压力较大
	从容量上:单个Redis服务器内存容量有限,一般来说,单台Redis最大使用内存不应该超过20G
	环境配置:
		只配置从库,不配置主库
		1.复制3个配置文件,修改对应的信息
		2.端口修改
		3.pid名字
		4.log文件名字
		5.dump.rdb名字
	配置主从
		从机执行命令 slaveof 主机ip 主机port
		从机恢复成主机	slaveof no one
	注意事项:
		主机可以写,从机不能写只能读,主机中的所有信息和数据,都会自动被从机保存!
		如果是使用命令配置的主从,这个时候如果重启,命令的配置就无效了
	复制原理
		slave启动成功连接到master后,会发送一个sync同步命令,master接收到命令后,启动后台的存盘进程,同时收集所有接收到的用于修改数据集命令,
		在后台进程执行完毕之后,master将传送整个数据文件到slave,并完成一次完全同步[全量复制].

Redis哨兵模式
	哨兵模式是一种特殊的模式,首先Redis提供了哨兵的命令,哨兵是一个独立的进程.原理是哨兵通过发送命令,等待Redis服务器响应,
	从而监控运行的多个Redis实例.
	哨兵有两个作用:
		1.通过发送命令,让Redis服务器返回监控其运行状态,包括主服务器和从服务器
		2.当哨兵监测到master宕机,会自动将salve切换成master,然后通过发布订阅模式通知其他的从服务器,修改配置文件,让它们切换主机.
	一个哨兵进程对Redis服务器进行监控,可能会出现问题,为此,可以使用多个哨兵监控,各个哨兵之间还会进行监控,形成多哨兵模式.
	哨兵配置文件[sentinel.conf]:
		# sentinel monitor 被监控的名称 监控的ip 端口 1(代表主机挂了,salve投票看让谁接替称为主机,票数最多的,就会称为主机)
		sentinel monitor master_redis 127.0.0.1 6379 1
	启动哨兵:
		redis-sentinel myconfig/sentinel.conf
	优点:
		1.哨兵集群,基于主从复制模式,所有的主从配置优点,它全有
		2.主从可以切换,故障可以转移,系统的可用性就会更好
		3.哨兵模式就是主从模式的升级,手动到自动,更加健壮
	缺点:
		1.Redis不好在线扩容,集群容量一旦到达上限,在线扩容就十分麻烦
		2.实现哨兵模式的配置其实是很麻烦的,里面有很多选择
		
Redis缓存穿透和缓存雪崩
	缓存穿透
		用户想要查询一个数据,发现redis内存数据句酷没有,也就是缓存没有命中,于是想持久层数据库查询,发现也没有,于是本次查询失败.
		当用户很多的时候,缓存都没有命中(秒杀场景),于是都去请求了持久层数据库,这会给数据库持久层带来很大压力,就可能会出现缓存雪崩.
		解决方案
			1.布隆过滤器: 布隆过滤器是一种数据结构,对所有可能查询的参数以hash形式存储,在控制层先进行校验,不符合则丢弃,从而避免了对
			底层数据存储系统的查询压力;
			2.缓存空对象: 当存储层不命中后,即使返回的空对象也将其缓存起来,同时会设置一个过期时间,之后再访问这个数据将会从缓存中获取,
			保护了后端数据源;
	缓存击穿
		指一个key非常热点,大量的请求集中对这一个点进行访问,当这个key在失效的瞬间,瞬间的大并发就穿破缓存,直接请求数据库;
		解决方案
			1.设置热点数据永不过期: 从缓存层面来看,没有设置过期时间,所以不会出现热点key过期后产生的问题
			2.加互斥锁: 
				分布式锁: 使用分布式锁,保证对于每个key同时只有一个线程去查询后端服务,其它线程没有获得分布式锁的权限,因此只需要等待即可,
				这种方式将高并发的压力转移到了分布式锁,因此对分布式锁的考验很大.
	缓存雪崩
		在某个时间段,缓存数据集中过期失效
		解决方案
			1.redis高可用: 增设redis服务器
			2.限流降级: 在缓存失效后,通过加锁或者队列来控制读数据库写缓存的线程数量.
			3.数据预热: 在正式部署之前,把可能的数据预先访问一遍,这样部分可能大量访问的数据就会加载到缓存中.在即将发生大并发访问
			前手动触发加载缓存不同的key,设置不同的过期时间,让缓存失效的时间点尽量均匀.


























